; Build vendored libbpf

(rule
 (deps
  (source_tree %{project_root}/vendor/libbpf))
 (targets
  libbpf.pc
  dllbpf.so
  libbpf.a
  bpf_core_read.h
  bpf_endian.h
  bpf.h
  bpf_helper_defs.h
  bpf_helpers.h
  bpf_tracing.h
  btf.h
  libbpf_common.h
  libbpf.h
  libbpf_legacy.h
  libbpf_version.h
  skel_internal.h
  usdt.bpf.h)
 (action
  (no-infer
   (progn
    (chdir
     %{project_root}/vendor/libbpf/src
     (progn
      (bash "mkdir build root")
      (run make OBJDIR=build DESTDIR=root install)))
    (copy
     %{project_root}/vendor/libbpf/src/build/libbpf.pc
     libbpf.pc)
    (copy
     %{project_root}/vendor/libbpf/src/root/usr/lib64/libbpf.so
     dllbpf.so)
    (copy %{project_root}/vendor/libbpf/src/root/usr/lib64/libbpf.a libbpf.a)
    (copy
     %{project_root}/vendor/libbpf/src/root/usr/include/bpf/bpf_core_read.h
     bpf_core_read.h)
    (copy
     %{project_root}/vendor/libbpf/src/root/usr/include/bpf/bpf_endian.h
     bpf_endian.h)
    (copy %{project_root}/vendor/libbpf/src/root/usr/include/bpf/bpf.h bpf.h)
    (copy
     %{project_root}/vendor/libbpf/src/root/usr/include/bpf/bpf_helper_defs.h
     bpf_helper_defs.h)
    (copy
     %{project_root}/vendor/libbpf/src/root/usr/include/bpf/bpf_helpers.h
     bpf_helpers.h)
    (copy
     %{project_root}/vendor/libbpf/src/root/usr/include/bpf/bpf_tracing.h
     bpf_tracing.h)
    (copy %{project_root}/vendor/libbpf/src/root/usr/include/bpf/btf.h btf.h)
    (copy
     %{project_root}/vendor/libbpf/src/root/usr/include/bpf/libbpf_common.h
     libbpf_common.h)
    (copy
     %{project_root}/vendor/libbpf/src/root/usr/include/bpf/libbpf.h
     libbpf.h)
    (copy
     %{project_root}/vendor/libbpf/src/root/usr/include/bpf/libbpf_legacy.h
     libbpf_legacy.h)
    (copy
     %{project_root}/vendor/libbpf/src/root/usr/include/bpf/libbpf_version.h
     libbpf_version.h)
    (copy
     %{project_root}/vendor/libbpf/src/root/usr/include/bpf/skel_internal.h
     skel_internal.h)
    (copy
     %{project_root}/vendor/libbpf/src/root/usr/include/bpf/usdt.bpf.h
     usdt.bpf.h)))))

; Everything below is the bindings generation process using ctypes. It produces
; two OCaml modules, Libbpf_c_generated_functions and Libbpf_c_generated_types.

; Type bindings (Libbpf_c_generated_types).

; Functor of type descriptions to be used in stub generator
; libbpf_c_type_descriptions.ml -> libbpf_c_type_descriptions.cma/cmxa/cmxs

(library
 (name libbpf_c_type_descriptions)
 (public_name ocaml_libbpf.libbpf_c_type_descriptions)
 (modules libbpf_c_type_descriptions)
 (libraries ctypes))

; Compile types_bindings_stub_gen with Libbpf_c_type_description.Types
; functor to output C generator from type descriptions
; types_binding_stub_gen.ml + libbpf_c_type_descriptions.cma/cmxa/cmxa -> types_binding_stub_gen.exe

(executable
 (name gen_type_bindings)
 (modules gen_type_bindings)
 (libraries ctypes.stubs libbpf_c_type_descriptions))

; Run generator gen_type_bindings.exe to get c source file to generate OCaml module
; gen_type_bindings.exe -> gen_type_bindings.c

(rule
 (targets gen_type_bindings.c)
 (deps libbpf.h)
 (action
  (run ./gen_type_bindings.exe)))

; Compile types_bindings_c_stub_gen.c
; types_bindings_c_stub_gen.c -> gen_type_bindings.exe

(rule
 (targets gen_type_bindings_from_c.exe)
 (deps gen_type_bindings.c)
 (action
  (bash
   "%{cc} %{deps} -I `dirname %{lib:ctypes:ctypes_cstubs_internals.h}` -I %{ocaml_where} -o %{targets}")))

; Run generator gen_type_bindings.exe to get
; libbpf_c_generated_types.ml
; gen_type_bindings_from_c.exe -> libbpf_c_generated_types.ml

(rule
 (with-stdout-to
  libbpf_c_generated_types.ml
  (run ./gen_type_bindings_from_c.exe)))

; Function bindings.

(library
 (name libbpf_c_function_descriptions)
 (public_name ocaml_libbpf.libbpf_c_function_descriptions)
 (flags ; (:standard -w -9-16-27)
  )
 ; (wrapped false)
 (modules libbpf_c_generated_types libbpf_c_function_descriptions)
 (libraries ctypes libbpf_c_type_descriptions))

; Compile gen_function_bindings

(executable
 (name gen_function_bindings)
 (modules gen_function_bindings)
 (libraries ctypes.stubs libbpf_c_function_descriptions))

; Generate both the function stubs and the generated functions

(rule
 (targets libbpf_stubs.c libbpf_c_generated_functions.ml)
 (deps gen_function_bindings.exe)
 (action
  (run %{deps})))

; This is so that we can collate the functions and type bindings

(library
 (name libbpf_bindings)
 (public_name ocaml_libbpf.libbpf_bindings)
 (libraries libbpf_c_function_descriptions)
 (modules libbpf_bindings libbpf_c_generated_functions))

; The Nicely packaged library for users

(library
 (name ocaml_libbpf)
 (public_name ocaml_libbpf)
 (foreign_archives bpf)
 (c_library_flags -lelf -lz)
 (foreign_stubs
  (language c)
  (names libbpf_stubs)
  (include_dirs include))
 (libraries ctypes.stubs libbpf_bindings)
 (modules ocaml_libbpf))
